hydra:
  run:
    dir: ${paths.log_dir}/${task_name}/runs/${now:%Y-%m-%d}_${now:%H-%M-%S}
  sweep:
    dir: ${paths.log_dir}/${task_name}/multiruns/${now:%Y-%m-%d}_${now:%H-%M-%S}
    subdir: ${hydra.job.num}
  launcher:
    _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
    n_jobs: 4
    backend: null
    prefer: processes
    require: null
    verbose: 0
    timeout: null
    pre_dispatch: 2*n_jobs
    batch_size: auto
    temp_folder: null
    max_nbytes: null
    mmap_mode: r
  sweeper:
    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
    max_batch_size: null
    params: null
  help:
    app_name: ${hydra.job.name}
    header: '${hydra.help.app_name} is powered by Hydra.

      '
    footer: 'Powered by Hydra (https://hydra.cc)

      Use --hydra-help to view Hydra specific help

      '
    template: '${hydra.help.header}

      == Configuration groups ==

      Compose your configuration from those groups (group=option)


      $APP_CONFIG_GROUPS


      == Config ==

      Override anything in the config (foo.bar=value)


      $CONFIG


      ${hydra.help.footer}

      '
  hydra_help:
    template: 'Hydra (${hydra.runtime.version})

      See https://hydra.cc for more info.


      == Flags ==

      $FLAGS_HELP


      == Configuration groups ==

      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
      to command line)


      $HYDRA_CONFIG_GROUPS


      Use ''--cfg hydra'' to Show the Hydra config.

      '
    hydra_help: ???
  hydra_logging:
    version: 1
    formatters:
      colorlog:
        (): colorlog.ColoredFormatter
        format: '[%(cyan)s%(asctime)s%(reset)s][%(purple)sHYDRA%(reset)s] %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: colorlog
        stream: ext://sys.stdout
    root:
      level: INFO
      handlers:
      - console
    disable_existing_loggers: false
  job_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
      colorlog:
        (): colorlog.ColoredFormatter
        format: '[%(cyan)s%(asctime)s%(reset)s][%(blue)s%(name)s%(reset)s][%(log_color)s%(levelname)s%(reset)s]
          - %(message)s'
        log_colors:
          DEBUG: purple
          INFO: green
          WARNING: yellow
          ERROR: red
          CRITICAL: red
    handlers:
      console:
        class: logging.StreamHandler
        formatter: colorlog
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        formatter: simple
        filename: ${hydra.runtime.output_dir}/${task_name}.log
    root:
      level: INFO
      handlers:
      - console
      - file
    disable_existing_loggers: false
  env: {}
  mode: MULTIRUN
  searchpath: []
  callbacks: {}
  output_subdir: .hydra
  overrides:
    hydra:
    - hydra/launcher=joblib
    - hydra.launcher.n_jobs=4
    - hydra.mode=MULTIRUN
    task:
    - experiment=bird_classifier_ex,dogbreed_ex
  job:
    name: train
    chdir: null
    override_dirname: experiment=bird_classifier_ex,dogbreed_ex
    id: ???
    num: ???
    config_name: train
    env_set: {}
    env_copy: []
    config:
      override_dirname:
        kv_sep: '='
        item_sep: ','
        exclude_keys: []
  runtime:
    version: 1.3.2
    version_base: '1.3'
    cwd: /Users/chiragtagadiya/MyProjects/EMLO_V4_projects/MLOps_ExperimentTracking_HyperParameterOptimizations
    config_sources:
    - path: hydra.conf
      schema: pkg
      provider: hydra
    - path: /Users/chiragtagadiya/MyProjects/EMLO_V4_projects/MLOps_ExperimentTracking_HyperParameterOptimizations/configs
      schema: file
      provider: main
    - path: hydra_plugins.hydra_colorlog.conf
      schema: pkg
      provider: hydra-colorlog
    - path: ''
      schema: structured
      provider: schema
    output_dir: ???
    choices:
      debug: null
      experiment: dogbreed_ex
      hydra: default
      paths: default
      trainer: cpu
      logger: default
      callbacks: default
      model: timm_classifier
      data: dogbreed
      hydra/env: default
      hydra/callbacks: null
      hydra/job_logging: colorlog
      hydra/hydra_logging: colorlog
      hydra/hydra_help: default
      hydra/help: default
      hydra/sweeper: basic
      hydra/launcher: joblib
      hydra/output: default
  verbose: false
task_name: train
log_task_name: train_${data.name}
tags:
- dogbreed
- classification
- resnet18
train: true
test: true
ckpt_path: null
seed: 42
data:
  _target_: src.datamodules.data_module.GenericDataModule
  data_dir: ${oc.env:PROJECT_ROOT}/data/dogbreed
  num_workers: 0
  batch_size: 32
  pin_memory: true
  splits:
  - 0.8
  - 0.1
  - 0.1
  train_transform: null
  test_transform: null
  image_size:
  - 224
  - 224
model:
  _target_: src.model_builder.timm_classifier.TimmClassifier
  base_model: resnet18
  num_classes: 10
  pretrained: true
  learning_rate: 0.0001
  weight_decay: 1.0e-05
  patience: 3
  factor: 0.1
  min_lr: 1.0e-06
callbacks:
  model_checkpoint:
    _target_: lightning.pytorch.callbacks.ModelCheckpoint
    dirpath: ${oc.env:PROJECT_ROOT}/checkpoints/${name}/
    filename: best_model
    monitor: val/acc
    verbose: false
    save_last: true
    save_top_k: 1
    mode: max
    auto_insert_metric_name: false
    save_weights_only: false
    every_n_train_steps: null
    train_time_interval: null
    every_n_epochs: null
    save_on_train_epoch_end: null
  early_stopping:
    _target_: lightning.pytorch.callbacks.EarlyStopping
    monitor: val/acc
    min_delta: 0.0
    patience: 10
    verbose: false
    mode: max
    strict: true
    check_finite: true
    stopping_threshold: null
    divergence_threshold: null
    check_on_train_epoch_end: null
  model_summary:
    _target_: lightning.pytorch.callbacks.RichModelSummary
    max_depth: -1
  rich_progress_bar:
    _target_: lightning.pytorch.callbacks.RichProgressBar
logger:
  csv:
    _target_: lightning.pytorch.loggers.CSVLogger
    save_dir: ${paths.output_dir}/logs
    name: csv_logs
    prefix: ''
  tensorboard:
    _target_: lightning.pytorch.loggers.TensorBoardLogger
    save_dir: ${paths.output_dir}/logs
    name: tensorboard_logs
    version: null
    log_graph: false
    default_hp_metric: true
    prefix: ''
  aim:
    _target_: aim.pytorch_lightning.AimLogger
    experiment: ${name}
    run_name: ${name}_run
    train_metric_prefix: train/
    test_metric_prefix: test/
    val_metric_prefix: val/
  mlflow:
    _target_: lightning.pytorch.loggers.MLFlowLogger
    experiment_name: ${name}
    tracking_uri: file:${paths.log_dir}/mlruns
    save_dir: ${paths.log_dir}/mlruns
    log_model: false
    prefix: ''
    run_name: ${name}_vit_tiny_patch16_224123
trainer:
  _target_: lightning.Trainer
  default_root_dir: ${paths.output_dir}
  min_epochs: 1
  max_epochs: 1
  accelerator: cpu
  devices: 1
  check_val_every_n_epoch: 1
  deterministic: false
paths:
  root_dir: ${oc.env:PROJECT_ROOT}
  data_dir: ${paths.root_dir}/data/
  log_dir: ${paths.root_dir}/logs/
  output_dir: ${hydra:runtime.output_dir}
  work_dir: ${hydra:runtime.cwd}
name: dogbreed_classification
