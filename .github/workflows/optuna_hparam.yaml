name: Train and Report

on:
  push:
    branches:
      - main  # Adjust this to your default branch
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Install uv
  #       uses: astral-sh/setup-uv@v3
  #       with:
  #         version: "0.4.22"  # Pin to a specific version of uv

  #     - name: Set up Python 3.12
  #       run: uv python install --version 3.12 # Install Python 3.12 with uv

  #     - name: Install dependencies
  #       run: |
  #         UV_INDEX_URL=https://download.pytorch.org/whl/cpu \
  #         UV_EXTRA_INDEX_URL=https://pypi.org/simple \
  #         uv sync --all-extras --dev  # Install dependencies with uv

  #     - name: Run tests with coverage
  #       run: |
  #         uv run coverage run -m pytest  # Run tests with coverage
  #         uv run coverage xml -o coverage.xml  # Generate coverage report in XML format

  #     - name: Upload coverage to Codecov
  #       uses: codecov/codecov-action@v4 # Update to the latest version
  #       with:
  #         token: ${{ secrets.CODECOV_TOKEN }}  # Use the token from secrets
  #         files: ./coverage.xml  # Specify the coverage report file
  #         fail_ci_if_error: true
  #         #slug: cr21/pytorch_lightning_hydra_template
  #         slug: ${{ github.repository }}

  # build-and-push-image:
  #   runs-on: ubuntu-latest
  #   needs: test  # Ensure this job runs after the CI job
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Log in to GitHub Container Registry
  #       uses: docker/login-action@v1
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}  # Use GitHub token for authentication

  #     - name: Build Docker image
  #       run: |
  #         docker build . -t ghcr.io/${{ github.repository }}/hydra-ptl:latest  # Adjust image name as needed

  #     - name: Push Docker image to GHCR
  #       run: |
  #         docker push ghcr.io/${{ github.repository }}/hydra-ptl:latest  # Push the image to GHCR

  train-and-report:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install uv
        run: |
          pip install uv  # Install uv before running any uv commands

      - name: Set up Python 3.12
        run: |
          uv python install --version 3.12 # Install Python 3.12 with uv

      - name: Set up DVC
        uses: iterative/setup-dvc@v1  # Use the DVC setup action

      - name: Set up CML
        uses: iterative/setup-cml@v2  # Use the CML setup action

      - name: Install dependencies
        run: |
          UV_INDEX_URL=https://download.pytorch.org/whl/cpu \
          UV_EXTRA_INDEX_URL=https://pypi.org/simple \
          uv sync --all-extras --dev  # Install dependencies with uv
          #pip install -r requirements.txt
          #uv pip install pandas matplotlib cml  # Install necessary packages

      - name: Pull data with DVC
        run: |
          uv run dvc pull --remote gdrive
          #uv run dvc pull --remote s3_store  # Pull data from S3
        env:
          #AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}  # AWS Access Key ID
          #AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # AWS Secret Access Key
          #AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}  # Optional: AWS region
          GDRIVE_CREDENTIALS_DATA: ${{ secrets.GDRIVE_CREDENTIALS_DATA }}  # Use secret for Google Drive credentials

      - name: Train model
        run: |
          rm -rf -f .aim 
          uv run aim init
          uv run dvc repro  # Run your training script with uv
      - name: Generate plots
        run: 
          uv run python src/utils/generate_plots.py # Script to generate plots with uv
      # - name: analyze experiment
      #   run: |
      #     uv run python src/analyze_experiment.py
      - name: Create CML report
        env:
          REPO_TOKEN: ${{ secrets.REPO_TOKEN }}  # Use secret for repository token
        run: |
          echo "# Hyperparameter Optimization Results" >> report.md
          echo "### Best Hyperparameters" >> report.md
          cat markdown_results/best_hparams.md >> report.md
          echo "## Model Training Results" >> report.md
          echo "### Training Metrics" >> report.md
          echo "![Training Loss](./plots/train_loss_plot.png)" >> report.md
          echo "![Training Accuracy](./plots/train_acc_plot.png)" >> report.md
          echo "![Validation Loss](./plots/val_loss_plot.png)" >> report.md
          echo "![Validation Accuracy](./plots/val_acc_plot.png)" >> report.md
          echo "![Test Loss](./plots/test_loss_plot.png)" >> report.md
          echo "![Test Accuracy](./plots/test_acc_plot.png)" >> report.md
          echo "![Test Best Accuracy](./plots/test_best_acc_plot.png)" >> report.md
          
          echo "### Confusion Matrices" >> report.md
          echo "![Training Confusion Matrix](./plots/train_confusion_matrix.png)" >> report.md
          echo "![Test Confusion Matrix](./plots/test_confusion_matrix.png)" >> report.md
          
          echo "### Predictions" >> report.md
          echo "![Predictions](./predictions_collage.png)" >> report.md
          
          echo "### Test Metrics" >> report.md
          cat markdown_results/test_metrics.md >> report.md

          echo "### Hyperparameter Table" >> report.md
          cat markdown_results/hyperparameter_table.md >> report.md

          
          
          # Post CML report as a comment in GitHub
          cml comment create report.md
